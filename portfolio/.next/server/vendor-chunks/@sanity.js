/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sanity";
exports.ids = ["vendor-chunks/@sanity"];
exports.modules = {

/***/ "(ssr)/./node_modules/@sanity/client/dist/index.cjs":
/*!****************************************************!*\
  !*** ./node_modules/@sanity/client/dist/index.cjs ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar middleware$1 = __webpack_require__(/*! get-it/middleware */ \"(ssr)/./node_modules/get-it/dist/middleware.cjs\");\nvar getIt = __webpack_require__(/*! get-it */ \"(ssr)/./node_modules/get-it/dist/index.cjs\");\nvar rxjs = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/index.js\");\nvar operators = __webpack_require__(/*! rxjs/operators */ \"(ssr)/./node_modules/rxjs/dist/cjs/operators/index.js\");\nvar name = \"@sanity/client\";\nvar version = \"6.7.0\";\nconst middleware = [middleware$1.debug({\n  verbose: true,\n  namespace: \"sanity:client\"\n}), middleware$1.headers({\n  \"User-Agent\": \"\".concat(name, \" \").concat(version)\n}),\n// Enable keep-alive, and in addition limit the number of sockets that can be opened.\n// This avoids opening too many connections to the server if someone tries to execute\n// a bunch of requests in parallel. It's recommended to have a concurrency limit\n// at a \"higher limit\" (i.e. you shouldn't actually execute hundreds of requests in parallel),\n// and this is mainly to minimize the impact for the network and server.\n//\n// We're currently matching the same defaults as browsers:\n// https://stackoverflow.com/questions/26003756/is-there-a-limit-practical-or-otherwise-to-the-number-of-web-sockets-a-page-op\nmiddleware$1.agent({\n  keepAlive: true,\n  maxSockets: 30,\n  maxTotalSockets: 256\n})];\nconst MAX_ITEMS_IN_ERROR_MESSAGE = 5;\nclass ClientError extends Error {\n  constructor(res) {\n    const props = extractErrorProps(res);\n    super(props.message);\n    this.statusCode = 400;\n    Object.assign(this, props);\n  }\n}\nclass ServerError extends Error {\n  constructor(res) {\n    const props = extractErrorProps(res);\n    super(props.message);\n    this.statusCode = 500;\n    Object.assign(this, props);\n  }\n}\nfunction extractErrorProps(res) {\n  const body = res.body;\n  const props = {\n    response: res,\n    statusCode: res.statusCode,\n    responseBody: stringifyBody(body, res),\n    message: \"\",\n    details: void 0\n  };\n  if (body.error && body.message) {\n    props.message = \"\".concat(body.error, \" - \").concat(body.message);\n    return props;\n  }\n  if (isMutationError(body)) {\n    const allItems = body.error.items || [];\n    const items = allItems.slice(0, MAX_ITEMS_IN_ERROR_MESSAGE).map(item => {\n      var _a;\n      return (_a = item.error) == null ? void 0 : _a.description;\n    }).filter(Boolean);\n    let itemsStr = items.length ? \":\\n- \".concat(items.join(\"\\n- \")) : \"\";\n    if (allItems.length > MAX_ITEMS_IN_ERROR_MESSAGE) {\n      itemsStr += \"\\n...and \".concat(allItems.length - MAX_ITEMS_IN_ERROR_MESSAGE, \" more\");\n    }\n    props.message = \"\".concat(body.error.description).concat(itemsStr);\n    props.details = body.error;\n    return props;\n  }\n  if (body.error && body.error.description) {\n    props.message = body.error.description;\n    props.details = body.error;\n    return props;\n  }\n  props.message = body.error || body.message || httpErrorMessage(res);\n  return props;\n}\nfunction isMutationError(body) {\n  return isPlainObject(body) && isPlainObject(body.error) && body.error.type === \"mutationError\" && typeof body.error.description === \"string\";\n}\nfunction isPlainObject(obj) {\n  return typeof obj === \"object\" && obj !== null && !Array.isArray(obj);\n}\nfunction httpErrorMessage(res) {\n  const statusMessage = res.statusMessage ? \" \".concat(res.statusMessage) : \"\";\n  return \"\".concat(res.method, \"-request to \").concat(res.url, \" resulted in HTTP \").concat(res.statusCode).concat(statusMessage);\n}\nfunction stringifyBody(body, res) {\n  const contentType = (res.headers[\"content-type\"] || \"\").toLowerCase();\n  const isJson = contentType.indexOf(\"application/json\") !== -1;\n  return isJson ? JSON.stringify(body, null, 2) : body;\n}\nconst httpError = {\n  onResponse: res => {\n    if (res.statusCode >= 500) {\n      throw new ServerError(res);\n    } else if (res.statusCode >= 400) {\n      throw new ClientError(res);\n    }\n    return res;\n  }\n};\nconst printWarnings = {\n  onResponse: res => {\n    const warn = res.headers[\"x-sanity-warning\"];\n    const warnings = Array.isArray(warn) ? warn : [warn];\n    warnings.filter(Boolean).forEach(msg => console.warn(msg));\n    return res;\n  }\n};\nfunction defineHttpRequest(envMiddleware, _ref) {\n  let {\n    maxRetries = 5,\n    retryDelay\n  } = _ref;\n  const request = getIt.getIt([maxRetries > 0 ? middleware$1.retry({\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    retryDelay,\n    // This option is typed incorrectly in get-it.\n    maxRetries,\n    shouldRetry\n  }) : {}, ...envMiddleware, printWarnings, middleware$1.jsonRequest(), middleware$1.jsonResponse(), middleware$1.progress(), httpError, middleware$1.observable({\n    implementation: rxjs.Observable\n  })]);\n  function httpRequest(options) {\n    let requester = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : request;\n    return requester({\n      maxRedirects: 0,\n      ...options\n    });\n  }\n  httpRequest.defaultRequester = request;\n  return httpRequest;\n}\nfunction shouldRetry(err, attempt, options) {\n  const isSafe = options.method === \"GET\" || options.method === \"HEAD\";\n  const uri = options.uri || options.url;\n  const isQuery = uri.startsWith(\"/data/query\");\n  const isRetriableResponse = err.response && (err.response.statusCode === 429 || err.response.statusCode === 502 || err.response.statusCode === 503);\n  if ((isSafe || isQuery) && isRetriableResponse) return true;\n  return middleware$1.retry.shouldRetry(err, attempt, options);\n}\nconst BASE_URL = \"https://www.sanity.io/help/\";\nfunction generateHelpUrl(slug) {\n  return BASE_URL + slug;\n}\nconst VALID_ASSET_TYPES = [\"image\", \"file\"];\nconst VALID_INSERT_LOCATIONS = [\"before\", \"after\", \"replace\"];\nconst dataset = name => {\n  if (!/^(~[a-z0-9]{1}[-\\w]{0,63}|[a-z0-9]{1}[-\\w]{0,63})$/.test(name)) {\n    throw new Error(\"Datasets can only contain lowercase characters, numbers, underscores and dashes, and start with tilde, and be maximum 64 characters\");\n  }\n};\nconst projectId = id => {\n  if (!/^[-a-z0-9]+$/i.test(id)) {\n    throw new Error(\"`projectId` can only contain only a-z, 0-9 and dashes\");\n  }\n};\nconst validateAssetType = type => {\n  if (VALID_ASSET_TYPES.indexOf(type) === -1) {\n    throw new Error(\"Invalid asset type: \".concat(type, \". Must be one of \").concat(VALID_ASSET_TYPES.join(\", \")));\n  }\n};\nconst validateObject = (op, val) => {\n  if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n    throw new Error(\"\".concat(op, \"() takes an object of properties\"));\n  }\n};\nconst validateDocumentId = (op, id) => {\n  if (typeof id !== \"string\" || !/^[a-z0-9_][a-z0-9_.-]{0,127}$/i.test(id) || id.includes(\"..\")) {\n    throw new Error(\"\".concat(op, '(): \"').concat(id, '\" is not a valid document ID'));\n  }\n};\nconst requireDocumentId = (op, doc) => {\n  if (!doc._id) {\n    throw new Error(\"\".concat(op, '() requires that the document contains an ID (\"_id\" property)'));\n  }\n  validateDocumentId(op, doc._id);\n};\nconst validateInsert = (at, selector, items) => {\n  const signature = \"insert(at, selector, items)\";\n  if (VALID_INSERT_LOCATIONS.indexOf(at) === -1) {\n    const valid = VALID_INSERT_LOCATIONS.map(loc => '\"'.concat(loc, '\"')).join(\", \");\n    throw new Error(\"\".concat(signature, ' takes an \"at\"-argument which is one of: ').concat(valid));\n  }\n  if (typeof selector !== \"string\") {\n    throw new Error(\"\".concat(signature, ' takes a \"selector\"-argument which must be a string'));\n  }\n  if (!Array.isArray(items)) {\n    throw new Error(\"\".concat(signature, ' takes an \"items\"-argument which must be an array'));\n  }\n};\nconst hasDataset = config => {\n  if (!config.dataset) {\n    throw new Error(\"`dataset` must be provided to perform queries\");\n  }\n  return config.dataset || \"\";\n};\nconst requestTag = tag => {\n  if (typeof tag !== \"string\" || !/^[a-z0-9._-]{1,75}$/i.test(tag)) {\n    throw new Error(\"Tag can only contain alphanumeric characters, underscores, dashes and dots, and be between one and 75 characters long.\");\n  }\n  return tag;\n};\nfunction once(fn) {\n  let didCall = false;\n  let returnValue;\n  return function () {\n    if (didCall) {\n      return returnValue;\n    }\n    returnValue = fn(...arguments);\n    didCall = true;\n    return returnValue;\n  };\n}\nconst createWarningPrinter = message =>\n// eslint-disable-next-line no-console\nonce(function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return console.warn(message.join(\" \"), ...args);\n});\nconst printCdnWarning = createWarningPrinter([\"Since you haven't set a value for `useCdn`, we will deliver content using our\", \"global, edge-cached API-CDN. If you wish to have content delivered faster, set\", \"`useCdn: false` to use the Live API. Note: You may incur higher costs using the live API.\"]);\nconst printCdnPreviewDraftsWarning = createWarningPrinter([\"The Sanity client is configured with the `perspective` set to `previewDrafts`, which doesn't support the API-CDN.\", \"The Live API will be used instead. Set `useCdn: false` in your configuration to hide this warning.\"]);\nconst printBrowserTokenWarning = createWarningPrinter([\"You have configured Sanity client to use a token in the browser. This may cause unintentional security issues.\", \"See \".concat(generateHelpUrl(\"js-client-browser-token\"), \" for more information and how to hide this warning.\")]);\nconst printNoApiVersionSpecifiedWarning = createWarningPrinter([\"Using the Sanity client without specifying an API version is deprecated.\", \"See \".concat(generateHelpUrl(\"js-client-api-version\"))]);\nconst printNoDefaultExport = createWarningPrinter([\"The default export of @sanity/client has been deprecated. Use the named export `createClient` instead.\"]);\nconst defaultCdnHost = \"apicdn.sanity.io\";\nconst defaultConfig = {\n  apiHost: \"https://api.sanity.io\",\n  apiVersion: \"1\",\n  useProjectHostname: true\n};\nconst LOCALHOSTS = [\"localhost\", \"127.0.0.1\", \"0.0.0.0\"];\nconst isLocal = host => LOCALHOSTS.indexOf(host) !== -1;\nconst validateApiVersion = function validateApiVersion2(apiVersion) {\n  if (apiVersion === \"1\" || apiVersion === \"X\") {\n    return;\n  }\n  const apiDate = new Date(apiVersion);\n  const apiVersionValid = /^\\d{4}-\\d{2}-\\d{2}$/.test(apiVersion) && apiDate instanceof Date && apiDate.getTime() > 0;\n  if (!apiVersionValid) {\n    throw new Error(\"Invalid API version string, expected `1` or date in format `YYYY-MM-DD`\");\n  }\n};\nconst validateApiPerspective = function validateApiPerspective2(perspective) {\n  switch (perspective) {\n    case \"previewDrafts\":\n    case \"published\":\n    case \"raw\":\n      return;\n    default:\n      throw new TypeError(\"Invalid API perspective string, expected `published`, `previewDrafts` or `raw`\");\n  }\n};\nconst initConfig = (config, prevConfig) => {\n  const specifiedConfig = Object.assign({}, prevConfig, config);\n  if (!specifiedConfig.apiVersion) {\n    printNoApiVersionSpecifiedWarning();\n  }\n  const newConfig = Object.assign({}, defaultConfig, specifiedConfig);\n  const projectBased = newConfig.useProjectHostname;\n  if (typeof Promise === \"undefined\") {\n    const helpUrl = generateHelpUrl(\"js-client-promise-polyfill\");\n    throw new Error(\"No native Promise-implementation found, polyfill needed - see \".concat(helpUrl));\n  }\n  if (projectBased && !newConfig.projectId) {\n    throw new Error(\"Configuration must contain `projectId`\");\n  }\n  if (typeof newConfig.perspective === \"string\") {\n    validateApiPerspective(newConfig.perspective);\n  }\n  if (\"encodeSourceMapAtPath\" in newConfig || \"encodeSourceMap\" in newConfig || \"studioUrl\" in newConfig || \"logger\" in newConfig) {\n    throw new Error(\"It looks like you're using options meant for '@sanity/preview-kit/client', such as 'encodeSourceMapAtPath', 'encodeSourceMap', 'studioUrl' and 'logger'. Make sure you're using the right import.\");\n  }\n  const isBrowser = typeof window !== \"undefined\" && window.location && window.location.hostname;\n  const isLocalhost = isBrowser && isLocal(window.location.hostname);\n  if (isBrowser && isLocalhost && newConfig.token && newConfig.ignoreBrowserTokenWarning !== true) {\n    printBrowserTokenWarning();\n  } else if (typeof newConfig.useCdn === \"undefined\") {\n    printCdnWarning();\n  }\n  if (projectBased) {\n    projectId(newConfig.projectId);\n  }\n  if (newConfig.dataset) {\n    dataset(newConfig.dataset);\n  }\n  if (\"requestTagPrefix\" in newConfig) {\n    newConfig.requestTagPrefix = newConfig.requestTagPrefix ? requestTag(newConfig.requestTagPrefix).replace(/\\.+$/, \"\") : void 0;\n  }\n  newConfig.apiVersion = \"\".concat(newConfig.apiVersion).replace(/^v/, \"\");\n  newConfig.isDefaultApi = newConfig.apiHost === defaultConfig.apiHost;\n  newConfig.useCdn = newConfig.useCdn !== false && !newConfig.withCredentials;\n  validateApiVersion(newConfig.apiVersion);\n  const hostParts = newConfig.apiHost.split(\"://\", 2);\n  const protocol = hostParts[0];\n  const host = hostParts[1];\n  const cdnHost = newConfig.isDefaultApi ? defaultCdnHost : host;\n  if (newConfig.useProjectHostname) {\n    newConfig.url = \"\".concat(protocol, \"://\").concat(newConfig.projectId, \".\").concat(host, \"/v\").concat(newConfig.apiVersion);\n    newConfig.cdnUrl = \"\".concat(protocol, \"://\").concat(newConfig.projectId, \".\").concat(cdnHost, \"/v\").concat(newConfig.apiVersion);\n  } else {\n    newConfig.url = \"\".concat(newConfig.apiHost, \"/v\").concat(newConfig.apiVersion);\n    newConfig.cdnUrl = newConfig.url;\n  }\n  return newConfig;\n};\nconst projectHeader = \"X-Sanity-Project-ID\";\nfunction requestOptions(config) {\n  let overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const headers = {};\n  const token = overrides.token || config.token;\n  if (token) {\n    headers.Authorization = \"Bearer \".concat(token);\n  }\n  if (!overrides.useGlobalApi && !config.useProjectHostname && config.projectId) {\n    headers[projectHeader] = config.projectId;\n  }\n  const withCredentials = Boolean(typeof overrides.withCredentials === \"undefined\" ? config.token || config.withCredentials : overrides.withCredentials);\n  const timeout = typeof overrides.timeout === \"undefined\" ? config.timeout : overrides.timeout;\n  return Object.assign({}, overrides, {\n    headers: Object.assign({}, headers, overrides.headers || {}),\n    timeout: typeof timeout === \"undefined\" ? 5 * 60 * 1e3 : timeout,\n    proxy: overrides.proxy || config.proxy,\n    json: true,\n    withCredentials,\n    fetch: typeof overrides.fetch === \"object\" && typeof config.fetch === \"object\" ? {\n      ...config.fetch,\n      ...overrides.fetch\n    } : overrides.fetch || config.fetch\n  });\n}\nfunction getSelection(sel) {\n  if (typeof sel === \"string\" || Array.isArray(sel)) {\n    return {\n      id: sel\n    };\n  }\n  if (typeof sel === \"object\" && sel !== null && \"query\" in sel && typeof sel.query === \"string\") {\n    return \"params\" in sel && typeof sel.params === \"object\" && sel.params !== null ? {\n      query: sel.query,\n      params: sel.params\n    } : {\n      query: sel.query\n    };\n  }\n  const selectionOpts = [\"* Document ID (<docId>)\", \"* Array of document IDs\", \"* Object containing `query`\"].join(\"\\n\");\n  throw new Error(\"Unknown selection - must be one of:\\n\\n\".concat(selectionOpts));\n}\nconst encodeQueryString = _ref2 => {\n  let {\n    query,\n    params = {},\n    options = {}\n  } = _ref2;\n  const searchParams = new URLSearchParams();\n  const {\n    tag,\n    ...opts\n  } = options;\n  if (tag) searchParams.append(\"tag\", tag);\n  searchParams.append(\"query\", query);\n  for (const [key, value] of Object.entries(params)) {\n    searchParams.append(\"$\".concat(key), JSON.stringify(value));\n  }\n  for (const [key, value] of Object.entries(opts)) {\n    if (value) searchParams.append(key, \"\".concat(value));\n  }\n  return \"?\".concat(searchParams);\n};\nvar __accessCheck$6 = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$6 = (obj, member, getter) => {\n  __accessCheck$6(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$6 = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$6 = (obj, member, value, setter) => {\n  __accessCheck$6(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _client$5, _client2$5;\nclass BasePatch {\n  constructor(selection) {\n    let operations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.selection = selection;\n    this.operations = operations;\n  }\n  /**\n   * Sets the given attributes to the document. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */\n  set(attrs) {\n    return this._assign(\"set\", attrs);\n  }\n  /**\n   * Sets the given attributes to the document if they are not currently set. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */\n  setIfMissing(attrs) {\n    return this._assign(\"setIfMissing\", attrs);\n  }\n  /**\n   * Performs a \"diff-match-patch\" operation on the string attributes provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to perform operation on. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"dmp\"\\}\n   */\n  diffMatchPatch(attrs) {\n    validateObject(\"diffMatchPatch\", attrs);\n    return this._assign(\"diffMatchPatch\", attrs);\n  }\n  /**\n   * Unsets the attribute paths provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attribute paths to unset.\n   */\n  unset(attrs) {\n    if (!Array.isArray(attrs)) {\n      throw new Error(\"unset(attrs) takes an array of attributes to unset, non-array given\");\n    }\n    this.operations = Object.assign({}, this.operations, {\n      unset: attrs\n    });\n    return this;\n  }\n  /**\n   * Increment a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to increment, values representing the number to increment by.\n   */\n  inc(attrs) {\n    return this._assign(\"inc\", attrs);\n  }\n  /**\n   * Decrement a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to decrement, values representing the number to decrement by.\n   */\n  dec(attrs) {\n    return this._assign(\"dec\", attrs);\n  }\n  /**\n   * Provides methods for modifying arrays, by inserting, appending and replacing elements via a JSONPath expression.\n   *\n   * @param at - Location to insert at, relative to the given selector, or 'replace' the matched path\n   * @param selector - JSONPath expression, eg `comments[-1]` or `blocks[_key==\"abc123\"]`\n   * @param items - Array of items to insert/replace\n   */\n  insert(at, selector, items) {\n    validateInsert(at, selector, items);\n    return this._assign(\"insert\", {\n      [at]: selector,\n      items\n    });\n  }\n  /**\n   * Append the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to append to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to append to the array\n   */\n  append(selector, items) {\n    return this.insert(\"after\", \"\".concat(selector, \"[-1]\"), items);\n  }\n  /**\n   * Prepend the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to prepend to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to prepend to the array\n   */\n  prepend(selector, items) {\n    return this.insert(\"before\", \"\".concat(selector, \"[0]\"), items);\n  }\n  /**\n   * Change the contents of an array by removing existing elements and/or adding new elements.\n   *\n   * @param selector - Attribute or JSONPath expression for array\n   * @param start - Index at which to start changing the array (with origin 0). If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end of the array (with origin -1) and will be set to 0 if absolute value is greater than the length of the array.x\n   * @param deleteCount - An integer indicating the number of old array elements to remove.\n   * @param items - The elements to add to the array, beginning at the start index. If you don't specify any elements, splice() will only remove elements from the array.\n   */\n  splice(selector, start, deleteCount, items) {\n    const delAll = typeof deleteCount === \"undefined\" || deleteCount === -1;\n    const startIndex = start < 0 ? start - 1 : start;\n    const delCount = delAll ? -1 : Math.max(0, start + deleteCount);\n    const delRange = startIndex < 0 && delCount >= 0 ? \"\" : delCount;\n    const rangeSelector = \"\".concat(selector, \"[\").concat(startIndex, \":\").concat(delRange, \"]\");\n    return this.insert(\"replace\", rangeSelector, items || []);\n  }\n  /**\n   * Adds a revision clause, preventing the document from being patched if the `_rev` property does not match the given value\n   *\n   * @param rev - Revision to lock the patch to\n   */\n  ifRevisionId(rev) {\n    this.operations.ifRevisionID = rev;\n    return this;\n  }\n  /**\n   * Return a plain JSON representation of the patch\n   */\n  serialize() {\n    return {\n      ...getSelection(this.selection),\n      ...this.operations\n    };\n  }\n  /**\n   * Return a plain JSON representation of the patch\n   */\n  toJSON() {\n    return this.serialize();\n  }\n  /**\n   * Clears the patch of all operations\n   */\n  reset() {\n    this.operations = {};\n    return this;\n  }\n  _assign(op, props) {\n    let merge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    validateObject(op, props);\n    this.operations = Object.assign({}, this.operations, {\n      [op]: Object.assign({}, merge && this.operations[op] || {}, props)\n    });\n    return this;\n  }\n  _set(op, props) {\n    return this._assign(op, props, false);\n  }\n}\nconst _ObservablePatch = class _ObservablePatch extends BasePatch {\n  constructor(selection, operations, client) {\n    super(selection, operations);\n    __privateAdd$6(this, _client$5, void 0);\n    __privateSet$6(this, _client$5, client);\n  }\n  /**\n   * Clones the patch\n   */\n  clone() {\n    return new _ObservablePatch(this.selection, {\n      ...this.operations\n    }, __privateGet$6(this, _client$5));\n  }\n  commit(options) {\n    if (!__privateGet$6(this, _client$5)) {\n      throw new Error(\"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\");\n    }\n    const returnFirst = typeof this.selection === \"string\";\n    const opts = Object.assign({\n      returnFirst,\n      returnDocuments: true\n    }, options);\n    return __privateGet$6(this, _client$5).mutate({\n      patch: this.serialize()\n    }, opts);\n  }\n};\n_client$5 = new WeakMap();\nlet ObservablePatch = _ObservablePatch;\nconst _Patch = class _Patch extends BasePatch {\n  constructor(selection, operations, client) {\n    super(selection, operations);\n    __privateAdd$6(this, _client2$5, void 0);\n    __privateSet$6(this, _client2$5, client);\n  }\n  /**\n   * Clones the patch\n   */\n  clone() {\n    return new _Patch(this.selection, {\n      ...this.operations\n    }, __privateGet$6(this, _client2$5));\n  }\n  commit(options) {\n    if (!__privateGet$6(this, _client2$5)) {\n      throw new Error(\"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\");\n    }\n    const returnFirst = typeof this.selection === \"string\";\n    const opts = Object.assign({\n      returnFirst,\n      returnDocuments: true\n    }, options);\n    return __privateGet$6(this, _client2$5).mutate({\n      patch: this.serialize()\n    }, opts);\n  }\n};\n_client2$5 = new WeakMap();\nlet Patch = _Patch;\nvar __accessCheck$5 = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$5 = (obj, member, getter) => {\n  __accessCheck$5(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$5 = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$5 = (obj, member, value, setter) => {\n  __accessCheck$5(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _client$4, _client2$4;\nconst defaultMutateOptions = {\n  returnDocuments: false\n};\nclass BaseTransaction {\n  constructor() {\n    let operations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let transactionId = arguments.length > 1 ? arguments[1] : undefined;\n    this.operations = operations;\n    this.trxId = transactionId;\n  }\n  /**\n   * Creates a new Sanity document. If `_id` is provided and already exists, the mutation will fail. If no `_id` is given, one will automatically be generated by the database.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create. Requires a `_type` property.\n   */\n  create(doc) {\n    validateObject(\"create\", doc);\n    return this._add({\n      create: doc\n    });\n  }\n  /**\n   * Creates a new Sanity document. If a document with the same `_id` already exists, the create operation will be ignored.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create if it does not already exist. Requires `_id` and `_type` properties.\n   */\n  createIfNotExists(doc) {\n    const op = \"createIfNotExists\";\n    validateObject(op, doc);\n    requireDocumentId(op, doc);\n    return this._add({\n      [op]: doc\n    });\n  }\n  /**\n   * Creates a new Sanity document, or replaces an existing one if the same `_id` is already used.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create or replace. Requires `_id` and `_type` properties.\n   */\n  createOrReplace(doc) {\n    const op = \"createOrReplace\";\n    validateObject(op, doc);\n    requireDocumentId(op, doc);\n    return this._add({\n      [op]: doc\n    });\n  }\n  /**\n   * Deletes the document with the given document ID\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param documentId - Document ID to delete\n   */\n  delete(documentId) {\n    validateDocumentId(\"delete\", documentId);\n    return this._add({\n      delete: {\n        id: documentId\n      }\n    });\n  }\n  transactionId(id) {\n    if (!id) {\n      return this.trxId;\n    }\n    this.trxId = id;\n    return this;\n  }\n  /**\n   * Return a plain JSON representation of the transaction\n   */\n  serialize() {\n    return [...this.operations];\n  }\n  /**\n   * Return a plain JSON representation of the transaction\n   */\n  toJSON() {\n    return this.serialize();\n  }\n  /**\n   * Clears the transaction of all operations\n   */\n  reset() {\n    this.operations = [];\n    return this;\n  }\n  _add(mut) {\n    this.operations.push(mut);\n    return this;\n  }\n}\nconst _Transaction = class _Transaction extends BaseTransaction {\n  constructor(operations, client, transactionId) {\n    super(operations, transactionId);\n    __privateAdd$5(this, _client$4, void 0);\n    __privateSet$5(this, _client$4, client);\n  }\n  /**\n   * Clones the transaction\n   */\n  clone() {\n    return new _Transaction([...this.operations], __privateGet$5(this, _client$4), this.trxId);\n  }\n  commit(options) {\n    if (!__privateGet$5(this, _client$4)) {\n      throw new Error(\"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\");\n    }\n    return __privateGet$5(this, _client$4).mutate(this.serialize(), Object.assign({\n      transactionId: this.trxId\n    }, defaultMutateOptions, options || {}));\n  }\n  patch(patchOrDocumentId, patchOps) {\n    const isBuilder = typeof patchOps === \"function\";\n    const isPatch = typeof patchOrDocumentId !== \"string\" && patchOrDocumentId instanceof Patch;\n    if (isPatch) {\n      return this._add({\n        patch: patchOrDocumentId.serialize()\n      });\n    }\n    if (isBuilder) {\n      const patch = patchOps(new Patch(patchOrDocumentId, {}, __privateGet$5(this, _client$4)));\n      if (!(patch instanceof Patch)) {\n        throw new Error(\"function passed to `patch()` must return the patch\");\n      }\n      return this._add({\n        patch: patch.serialize()\n      });\n    }\n    return this._add({\n      patch: {\n        id: patchOrDocumentId,\n        ...patchOps\n      }\n    });\n  }\n};\n_client$4 = new WeakMap();\nlet Transaction = _Transaction;\nconst _ObservableTransaction = class _ObservableTransaction extends BaseTransaction {\n  constructor(operations, client, transactionId) {\n    super(operations, transactionId);\n    __privateAdd$5(this, _client2$4, void 0);\n    __privateSet$5(this, _client2$4, client);\n  }\n  /**\n   * Clones the transaction\n   */\n  clone() {\n    return new _ObservableTransaction([...this.operations], __privateGet$5(this, _client2$4), this.trxId);\n  }\n  commit(options) {\n    if (!__privateGet$5(this, _client2$4)) {\n      throw new Error(\"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\");\n    }\n    return __privateGet$5(this, _client2$4).mutate(this.serialize(), Object.assign({\n      transactionId: this.trxId\n    }, defaultMutateOptions, options || {}));\n  }\n  patch(patchOrDocumentId, patchOps) {\n    const isBuilder = typeof patchOps === \"function\";\n    const isPatch = typeof patchOrDocumentId !== \"string\" && patchOrDocumentId instanceof ObservablePatch;\n    if (isPatch) {\n      return this._add({\n        patch: patchOrDocumentId.serialize()\n      });\n    }\n    if (isBuilder) {\n      const patch = patchOps(new ObservablePatch(patchOrDocumentId, {}, __privateGet$5(this, _client2$4)));\n      if (!(patch instanceof ObservablePatch)) {\n        throw new Error(\"function passed to `patch()` must return the patch\");\n      }\n      return this._add({\n        patch: patch.serialize()\n      });\n    }\n    return this._add({\n      patch: {\n        id: patchOrDocumentId,\n        ...patchOps\n      }\n    });\n  }\n};\n_client2$4 = new WeakMap();\nlet ObservableTransaction = _ObservableTransaction;\nconst excludeFalsey = (param, defValue) => {\n  const value = typeof param === \"undefined\" ? defValue : param;\n  return param === false ? void 0 : value;\n};\nconst getMutationQuery = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    dryRun: options.dryRun,\n    returnIds: true,\n    returnDocuments: excludeFalsey(options.returnDocuments, true),\n    visibility: options.visibility || \"sync\",\n    autoGenerateArrayKeys: options.autoGenerateArrayKeys,\n    skipCrossDatasetReferenceValidation: options.skipCrossDatasetReferenceValidation\n  };\n};\nconst isResponse = event => event.type === \"response\";\nconst getBody = event => event.body;\nconst indexBy = (docs, attr) => docs.reduce((indexed, doc) => {\n  indexed[attr(doc)] = doc;\n  return indexed;\n}, /* @__PURE__ */Object.create(null));\nconst getQuerySizeLimit = 11264;\nfunction _fetch(client, httpRequest, query, params) {\n  let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  const mapResponse = options.filterResponse === false ? res => res : res => res.result;\n  const {\n    cache,\n    next,\n    ...opts\n  } = {\n    // Opt out of setting a `signal` on an internal `fetch` if one isn't provided.\n    // This is necessary in React Server Components to avoid opting out of Request Memoization.\n    useAbortSignal: typeof options.signal !== \"undefined\",\n    ...options\n  };\n  const reqOpts = typeof cache !== \"undefined\" || typeof next !== \"undefined\" ? {\n    ...opts,\n    fetch: {\n      cache,\n      next\n    }\n  } : opts;\n  return _dataRequest(client, httpRequest, \"query\", {\n    query,\n    params\n  }, reqOpts).pipe(operators.map(mapResponse));\n}\nfunction _getDocument(client, httpRequest, id) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const options = {\n    uri: _getDataUrl(client, \"doc\", id),\n    json: true,\n    tag: opts.tag\n  };\n  return _requestObservable(client, httpRequest, options).pipe(operators.filter(isResponse), operators.map(event => event.body.documents && event.body.documents[0]));\n}\nfunction _getDocuments(client, httpRequest, ids) {\n  let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const options = {\n    uri: _getDataUrl(client, \"doc\", ids.join(\",\")),\n    json: true,\n    tag: opts.tag\n  };\n  return _requestObservable(client, httpRequest, options).pipe(operators.filter(isResponse), operators.map(event => {\n    const indexed = indexBy(event.body.documents || [], doc => doc._id);\n    return ids.map(id => indexed[id] || null);\n  }));\n}\nfunction _createIfNotExists(client, httpRequest, doc, options) {\n  requireDocumentId(\"createIfNotExists\", doc);\n  return _create(client, httpRequest, doc, \"createIfNotExists\", options);\n}\nfunction _createOrReplace(client, httpRequest, doc, options) {\n  requireDocumentId(\"createOrReplace\", doc);\n  return _create(client, httpRequest, doc, \"createOrReplace\", options);\n}\nfunction _delete(client, httpRequest, selection, options) {\n  return _dataRequest(client, httpRequest, \"mutate\", {\n    mutations: [{\n      delete: getSelection(selection)\n    }]\n  }, options);\n}\nfunction _mutate(client, httpRequest, mutations, options) {\n  let mut;\n  if (mutations instanceof Patch || mutations instanceof ObservablePatch) {\n    mut = {\n      patch: mutations.serialize()\n    };\n  } else if (mutations instanceof Transaction || mutations instanceof ObservableTransaction) {\n    mut = mutations.serialize();\n  } else {\n    mut = mutations;\n  }\n  const muts = Array.isArray(mut) ? mut : [mut];\n  const transactionId = options && options.transactionId || void 0;\n  return _dataRequest(client, httpRequest, \"mutate\", {\n    mutations: muts,\n    transactionId\n  }, options);\n}\nfunction _dataRequest(client, httpRequest, endpoint, body) {\n  let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  const isMutation = endpoint === \"mutate\";\n  const isQuery = endpoint === \"query\";\n  const strQuery = isMutation ? \"\" : encodeQueryString(body);\n  const useGet = !isMutation && strQuery.length < getQuerySizeLimit;\n  const stringQuery = useGet ? strQuery : \"\";\n  const returnFirst = options.returnFirst;\n  const {\n    timeout,\n    token,\n    tag,\n    headers\n  } = options;\n  const uri = _getDataUrl(client, endpoint, stringQuery);\n  const reqOptions = {\n    method: useGet ? \"GET\" : \"POST\",\n    uri,\n    json: true,\n    body: useGet ? void 0 : body,\n    query: isMutation && getMutationQuery(options),\n    timeout,\n    headers,\n    token,\n    tag,\n    perspective: options.perspective,\n    resultSourceMap: options.resultSourceMap,\n    canUseCdn: isQuery,\n    signal: options.signal,\n    fetch: options.fetch,\n    useAbortSignal: options.useAbortSignal\n  };\n  return _requestObservable(client, httpRequest, reqOptions).pipe(operators.filter(isResponse), operators.map(getBody), operators.map(res => {\n    if (!isMutation) {\n      return res;\n    }\n    const results = res.results || [];\n    if (options.returnDocuments) {\n      return returnFirst ? results[0] && results[0].document : results.map(mut => mut.document);\n    }\n    const key = returnFirst ? \"documentId\" : \"documentIds\";\n    const ids = returnFirst ? results[0] && results[0].id : results.map(mut => mut.id);\n    return {\n      transactionId: res.transactionId,\n      results,\n      [key]: ids\n    };\n  }));\n}\nfunction _create(client, httpRequest, doc, op) {\n  let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  const mutation = {\n    [op]: doc\n  };\n  const opts = Object.assign({\n    returnFirst: true,\n    returnDocuments: true\n  }, options);\n  return _dataRequest(client, httpRequest, \"mutate\", {\n    mutations: [mutation]\n  }, opts);\n}\nfunction _requestObservable(client, httpRequest, options) {\n  var _a;\n  const uri = options.url || options.uri;\n  const config = client.config();\n  const canUseCdn = typeof options.canUseCdn === \"undefined\" ? [\"GET\", \"HEAD\"].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/\") === 0 : options.canUseCdn;\n  let useCdn = config.useCdn && canUseCdn;\n  const tag = options.tag && config.requestTagPrefix ? [config.requestTagPrefix, options.tag].join(\".\") : options.tag || config.requestTagPrefix;\n  if (tag && options.tag !== null) {\n    options.query = {\n      tag: requestTag(tag),\n      ...options.query\n    };\n  }\n  if ([\"GET\", \"HEAD\", \"POST\"].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/query/\") === 0) {\n    const resultSourceMap = (_a = options.resultSourceMap) != null ? _a : config.resultSourceMap;\n    if (resultSourceMap !== void 0 && resultSourceMap !== false) {\n      options.query = {\n        resultSourceMap,\n        ...options.query\n      };\n    }\n    const perspective = options.perspective || config.perspective;\n    if (typeof perspective === \"string\" && perspective !== \"raw\") {\n      validateApiPerspective(perspective);\n      options.query = {\n        perspective,\n        ...options.query\n      };\n      if (perspective === \"previewDrafts\" && useCdn) {\n        useCdn = false;\n        printCdnPreviewDraftsWarning();\n      }\n    }\n  }\n  const reqOptions = requestOptions(config, Object.assign({}, options, {\n    url: _getUrl(client, uri, useCdn)\n  }));\n  const request = new rxjs.Observable(subscriber => httpRequest(reqOptions, config.requester).subscribe(subscriber));\n  return options.signal ? request.pipe(_withAbortSignal(options.signal)) : request;\n}\nfunction _request(client, httpRequest, options) {\n  const observable = _requestObservable(client, httpRequest, options).pipe(operators.filter(event => event.type === \"response\"), operators.map(event => event.body));\n  return observable;\n}\nfunction _getDataUrl(client, operation, path) {\n  const config = client.config();\n  const catalog = hasDataset(config);\n  const baseUri = \"/\".concat(operation, \"/\").concat(catalog);\n  const uri = path ? \"\".concat(baseUri, \"/\").concat(path) : baseUri;\n  return \"/data\".concat(uri).replace(/\\/($|\\?)/, \"$1\");\n}\nfunction _getUrl(client, uri) {\n  let canUseCdn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const {\n    url,\n    cdnUrl\n  } = client.config();\n  const base = canUseCdn ? cdnUrl : url;\n  return \"\".concat(base, \"/\").concat(uri.replace(/^\\//, \"\"));\n}\nfunction _withAbortSignal(signal) {\n  return input => {\n    return new rxjs.Observable(observer => {\n      const abort = () => observer.error(_createAbortError(signal));\n      if (signal && signal.aborted) {\n        abort();\n        return;\n      }\n      const subscription = input.subscribe(observer);\n      signal.addEventListener(\"abort\", abort);\n      return () => {\n        signal.removeEventListener(\"abort\", abort);\n        subscription.unsubscribe();\n      };\n    });\n  };\n}\nconst isDomExceptionSupported = Boolean(globalThis.DOMException);\nfunction _createAbortError(signal) {\n  var _a, _b;\n  if (isDomExceptionSupported) {\n    return new DOMException((_a = signal == null ? void 0 : signal.reason) != null ? _a : \"The operation was aborted.\", \"AbortError\");\n  }\n  const error = new Error((_b = signal == null ? void 0 : signal.reason) != null ? _b : \"The operation was aborted.\");\n  error.name = \"AbortError\";\n  return error;\n}\nvar __accessCheck$4 = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$4 = (obj, member, getter) => {\n  __accessCheck$4(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$4 = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$4 = (obj, member, value, setter) => {\n  __accessCheck$4(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _client$3, _httpRequest$4, _client2$3, _httpRequest2$4;\nclass ObservableAssetsClient {\n  constructor(client, httpRequest) {\n    __privateAdd$4(this, _client$3, void 0);\n    __privateAdd$4(this, _httpRequest$4, void 0);\n    __privateSet$4(this, _client$3, client);\n    __privateSet$4(this, _httpRequest$4, httpRequest);\n  }\n  upload(assetType, body, options) {\n    return _upload(__privateGet$4(this, _client$3), __privateGet$4(this, _httpRequest$4), assetType, body, options);\n  }\n}\n_client$3 = new WeakMap();\n_httpRequest$4 = new WeakMap();\nclass AssetsClient {\n  constructor(client, httpRequest) {\n    __privateAdd$4(this, _client2$3, void 0);\n    __privateAdd$4(this, _httpRequest2$4, void 0);\n    __privateSet$4(this, _client2$3, client);\n    __privateSet$4(this, _httpRequest2$4, httpRequest);\n  }\n  upload(assetType, body, options) {\n    const observable = _upload(__privateGet$4(this, _client2$3), __privateGet$4(this, _httpRequest2$4), assetType, body, options);\n    return rxjs.lastValueFrom(observable.pipe(operators.filter(event => event.type === \"response\"), operators.map(event => event.body.document)));\n  }\n}\n_client2$3 = new WeakMap();\n_httpRequest2$4 = new WeakMap();\nfunction _upload(client, httpRequest, assetType, body) {\n  let opts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  validateAssetType(assetType);\n  let meta = opts.extract || void 0;\n  if (meta && !meta.length) {\n    meta = [\"none\"];\n  }\n  const dataset = hasDataset(client.config());\n  const assetEndpoint = assetType === \"image\" ? \"images\" : \"files\";\n  const options = optionsFromFile(opts, body);\n  const {\n    tag,\n    label,\n    title,\n    description,\n    creditLine,\n    filename,\n    source\n  } = options;\n  const query = {\n    label,\n    title,\n    description,\n    filename,\n    meta,\n    creditLine\n  };\n  if (source) {\n    query.sourceId = source.id;\n    query.sourceName = source.name;\n    query.sourceUrl = source.url;\n  }\n  return _requestObservable(client, httpRequest, {\n    tag,\n    method: \"POST\",\n    timeout: options.timeout || 0,\n    uri: \"/assets/\".concat(assetEndpoint, \"/\").concat(dataset),\n    headers: options.contentType ? {\n      \"Content-Type\": options.contentType\n    } : {},\n    query,\n    body\n  });\n}\nfunction optionsFromFile(opts, file) {\n  if (typeof File === \"undefined\" || !(file instanceof File)) {\n    return opts;\n  }\n  return Object.assign({\n    filename: opts.preserveFilename === false ? void 0 : file.name,\n    contentType: file.type\n  }, opts);\n}\nvar defaults = (obj, defaults) => Object.keys(defaults).concat(Object.keys(obj)).reduce((target, prop) => {\n  target[prop] = typeof obj[prop] === \"undefined\" ? defaults[prop] : obj[prop];\n  return target;\n}, {});\nconst pick = (obj, props) => props.reduce((selection, prop) => {\n  if (typeof obj[prop] === \"undefined\") {\n    return selection;\n  }\n  selection[prop] = obj[prop];\n  return selection;\n}, {});\nconst MAX_URL_LENGTH = 16e3 - 1200;\nconst possibleOptions = [\"includePreviousRevision\", \"includeResult\", \"visibility\", \"effectFormat\", \"tag\"];\nconst defaultOptions = {\n  includeResult: true\n};\nfunction _listen(query, params) {\n  let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    url,\n    token,\n    withCredentials,\n    requestTagPrefix\n  } = this.config();\n  const tag = opts.tag && requestTagPrefix ? [requestTagPrefix, opts.tag].join(\".\") : opts.tag;\n  const options = {\n    ...defaults(opts, defaultOptions),\n    tag\n  };\n  const listenOpts = pick(options, possibleOptions);\n  const qs = encodeQueryString({\n    query,\n    params,\n    options: {\n      tag,\n      ...listenOpts\n    }\n  });\n  const uri = \"\".concat(url).concat(_getDataUrl(this, \"listen\", qs));\n  if (uri.length > MAX_URL_LENGTH) {\n    return new rxjs.Observable(observer => observer.error(new Error(\"Query too large for listener\")));\n  }\n  const listenFor = options.events ? options.events : [\"mutation\"];\n  const shouldEmitReconnect = listenFor.indexOf(\"reconnect\") !== -1;\n  const esOptions = {};\n  if (token || withCredentials) {\n    esOptions.withCredentials = true;\n  }\n  if (token) {\n    esOptions.headers = {\n      Authorization: \"Bearer \".concat(token)\n    };\n  }\n  return new rxjs.Observable(observer => {\n    let es;\n    getEventSource().then(eventSource => {\n      es = eventSource;\n    }).catch(reason => {\n      observer.error(reason);\n      stop();\n    });\n    let reconnectTimer;\n    let stopped = false;\n    function onError() {\n      if (stopped) {\n        return;\n      }\n      emitReconnect();\n      if (stopped) {\n        return;\n      }\n      if (es.readyState === es.CLOSED) {\n        unsubscribe();\n        clearTimeout(reconnectTimer);\n        reconnectTimer = setTimeout(open, 100);\n      }\n    }\n    function onChannelError(err) {\n      observer.error(cooerceError(err));\n    }\n    function onMessage(evt) {\n      const event = parseEvent(evt);\n      return event instanceof Error ? observer.error(event) : observer.next(event);\n    }\n    function onDisconnect() {\n      stopped = true;\n      unsubscribe();\n      observer.complete();\n    }\n    function unsubscribe() {\n      if (!es) return;\n      es.removeEventListener(\"error\", onError);\n      es.removeEventListener(\"channelError\", onChannelError);\n      es.removeEventListener(\"disconnect\", onDisconnect);\n      listenFor.forEach(type => es.removeEventListener(type, onMessage));\n      es.close();\n    }\n    function emitReconnect() {\n      if (shouldEmitReconnect) {\n        observer.next({\n          type: \"reconnect\"\n        });\n      }\n    }\n    async function getEventSource() {\n      const {\n        default: EventSource\n      } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@sanity\"), __webpack_require__.e(\"vendor-chunks/eventsource\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! @sanity/eventsource */ \"(ssr)/./node_modules/@sanity/eventsource/node.js\", 23));\n      const evs = new EventSource(uri, esOptions);\n      evs.addEventListener(\"error\", onError);\n      evs.addEventListener(\"channelError\", onChannelError);\n      evs.addEventListener(\"disconnect\", onDisconnect);\n      listenFor.forEach(type => evs.addEventListener(type, onMessage));\n      return evs;\n    }\n    function open() {\n      getEventSource().then(eventSource => {\n        es = eventSource;\n      }).catch(reason => {\n        observer.error(reason);\n        stop();\n      });\n    }\n    function stop() {\n      stopped = true;\n      unsubscribe();\n    }\n    return stop;\n  });\n}\nfunction parseEvent(event) {\n  try {\n    const data = event.data && JSON.parse(event.data) || {};\n    return Object.assign({\n      type: event.type\n    }, data);\n  } catch (err) {\n    return err;\n  }\n}\nfunction cooerceError(err) {\n  if (err instanceof Error) {\n    return err;\n  }\n  const evt = parseEvent(err);\n  return evt instanceof Error ? evt : new Error(extractErrorMessage(evt));\n}\nfunction extractErrorMessage(err) {\n  if (!err.error) {\n    return err.message || \"Unknown listener error\";\n  }\n  if (err.error.description) {\n    return err.error.description;\n  }\n  return typeof err.error === \"string\" ? err.error : JSON.stringify(err.error, null, 2);\n}\nvar __accessCheck$3 = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$3 = (obj, member, getter) => {\n  __accessCheck$3(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$3 = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$3 = (obj, member, value, setter) => {\n  __accessCheck$3(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _client$2, _httpRequest$3, _client2$2, _httpRequest2$3;\nclass ObservableDatasetsClient {\n  constructor(client, httpRequest) {\n    __privateAdd$3(this, _client$2, void 0);\n    __privateAdd$3(this, _httpRequest$3, void 0);\n    __privateSet$3(this, _client$2, client);\n    __privateSet$3(this, _httpRequest$3, httpRequest);\n  }\n  /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */\n  create(name, options) {\n    return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), \"PUT\", name, options);\n  }\n  /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */\n  edit(name, options) {\n    return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), \"PATCH\", name, options);\n  }\n  /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */\n  delete(name) {\n    return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), \"DELETE\", name);\n  }\n  /**\n   * Fetch a list of datasets for the configured project\n   */\n  list() {\n    return _request(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), {\n      uri: \"/datasets\",\n      tag: null\n    });\n  }\n}\n_client$2 = new WeakMap();\n_httpRequest$3 = new WeakMap();\nclass DatasetsClient {\n  constructor(client, httpRequest) {\n    __privateAdd$3(this, _client2$2, void 0);\n    __privateAdd$3(this, _httpRequest2$3, void 0);\n    __privateSet$3(this, _client2$2, client);\n    __privateSet$3(this, _httpRequest2$3, httpRequest);\n  }\n  /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */\n  create(name, options) {\n    return rxjs.lastValueFrom(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), \"PUT\", name, options));\n  }\n  /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */\n  edit(name, options) {\n    return rxjs.lastValueFrom(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), \"PATCH\", name, options));\n  }\n  /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */\n  delete(name) {\n    return rxjs.lastValueFrom(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), \"DELETE\", name));\n  }\n  /**\n   * Fetch a list of datasets for the configured project\n   */\n  list() {\n    return rxjs.lastValueFrom(_request(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), {\n      uri: \"/datasets\",\n      tag: null\n    }));\n  }\n}\n_client2$2 = new WeakMap();\n_httpRequest2$3 = new WeakMap();\nfunction _modify(client, httpRequest, method, name, options) {\n  dataset(name);\n  return _request(client, httpRequest, {\n    method,\n    uri: \"/datasets/\".concat(name),\n    body: options,\n    tag: null\n  });\n}\nvar __accessCheck$2 = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$2 = (obj, member, getter) => {\n  __accessCheck$2(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$2 = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$2 = (obj, member, value, setter) => {\n  __accessCheck$2(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _client$1, _httpRequest$2, _client2$1, _httpRequest2$2;\nclass ObservableProjectsClient {\n  constructor(client, httpRequest) {\n    __privateAdd$2(this, _client$1, void 0);\n    __privateAdd$2(this, _httpRequest$2, void 0);\n    __privateSet$2(this, _client$1, client);\n    __privateSet$2(this, _httpRequest$2, httpRequest);\n  }\n  list(options) {\n    const uri = (options == null ? void 0 : options.includeMembers) === false ? \"/projects?includeMembers=false\" : \"/projects\";\n    return _request(__privateGet$2(this, _client$1), __privateGet$2(this, _httpRequest$2), {\n      uri\n    });\n  }\n  /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */\n  getById(projectId) {\n    return _request(__privateGet$2(this, _client$1), __privateGet$2(this, _httpRequest$2), {\n      uri: \"/projects/\".concat(projectId)\n    });\n  }\n}\n_client$1 = new WeakMap();\n_httpRequest$2 = new WeakMap();\nclass ProjectsClient {\n  constructor(client, httpRequest) {\n    __privateAdd$2(this, _client2$1, void 0);\n    __privateAdd$2(this, _httpRequest2$2, void 0);\n    __privateSet$2(this, _client2$1, client);\n    __privateSet$2(this, _httpRequest2$2, httpRequest);\n  }\n  list(options) {\n    const uri = (options == null ? void 0 : options.includeMembers) === false ? \"/projects?includeMembers=false\" : \"/projects\";\n    return rxjs.lastValueFrom(_request(__privateGet$2(this, _client2$1), __privateGet$2(this, _httpRequest2$2), {\n      uri\n    }));\n  }\n  /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */\n  getById(projectId) {\n    return rxjs.lastValueFrom(_request(__privateGet$2(this, _client2$1), __privateGet$2(this, _httpRequest2$2), {\n      uri: \"/projects/\".concat(projectId)\n    }));\n  }\n}\n_client2$1 = new WeakMap();\n_httpRequest2$2 = new WeakMap();\nvar __accessCheck$1 = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$1 = (obj, member, getter) => {\n  __accessCheck$1(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$1 = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$1 = (obj, member, value, setter) => {\n  __accessCheck$1(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _client, _httpRequest$1, _client2, _httpRequest2$1;\nclass ObservableUsersClient {\n  constructor(client, httpRequest) {\n    __privateAdd$1(this, _client, void 0);\n    __privateAdd$1(this, _httpRequest$1, void 0);\n    __privateSet$1(this, _client, client);\n    __privateSet$1(this, _httpRequest$1, httpRequest);\n  }\n  /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */\n  getById(id) {\n    return _request(__privateGet$1(this, _client), __privateGet$1(this, _httpRequest$1), {\n      uri: \"/users/\".concat(id)\n    });\n  }\n}\n_client = new WeakMap();\n_httpRequest$1 = new WeakMap();\nclass UsersClient {\n  constructor(client, httpRequest) {\n    __privateAdd$1(this, _client2, void 0);\n    __privateAdd$1(this, _httpRequest2$1, void 0);\n    __privateSet$1(this, _client2, client);\n    __privateSet$1(this, _httpRequest2$1, httpRequest);\n  }\n  /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */\n  getById(id) {\n    return rxjs.lastValueFrom(_request(__privateGet$1(this, _client2), __privateGet$1(this, _httpRequest2$1), {\n      uri: \"/users/\".concat(id)\n    }));\n  }\n}\n_client2 = new WeakMap();\n_httpRequest2$1 = new WeakMap();\nvar __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _clientConfig, _httpRequest, _clientConfig2, _httpRequest2;\nconst _ObservableSanityClient = class _ObservableSanityClient {\n  constructor(httpRequest) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultConfig;\n    /**\n     * Private properties\n     */\n    __privateAdd(this, _clientConfig, void 0);\n    __privateAdd(this, _httpRequest, void 0);\n    /**\n     * Instance properties\n     */\n    this.listen = _listen;\n    this.config(config);\n    __privateSet(this, _httpRequest, httpRequest);\n    this.assets = new ObservableAssetsClient(this, __privateGet(this, _httpRequest));\n    this.datasets = new ObservableDatasetsClient(this, __privateGet(this, _httpRequest));\n    this.projects = new ObservableProjectsClient(this, __privateGet(this, _httpRequest));\n    this.users = new ObservableUsersClient(this, __privateGet(this, _httpRequest));\n  }\n  /**\n   * Clone the client - returns a new instance\n   */\n  clone() {\n    return new _ObservableSanityClient(__privateGet(this, _httpRequest), this.config());\n  }\n  config(newConfig) {\n    if (newConfig === void 0) {\n      return {\n        ...__privateGet(this, _clientConfig)\n      };\n    }\n    if (__privateGet(this, _clientConfig) && __privateGet(this, _clientConfig).allowReconfigure === false) {\n      throw new Error(\"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\");\n    }\n    __privateSet(this, _clientConfig, initConfig(newConfig, __privateGet(this, _clientConfig) || {}));\n    return this;\n  }\n  /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */\n  withConfig(newConfig) {\n    return new _ObservableSanityClient(__privateGet(this, _httpRequest), {\n      ...this.config(),\n      ...newConfig\n    });\n  }\n  fetch(query, params) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return _fetch(this, __privateGet(this, _httpRequest), query, params, options);\n  }\n  /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */\n  getDocument(id, options) {\n    return _getDocument(this, __privateGet(this, _httpRequest), id, options);\n  }\n  /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */\n  getDocuments(ids, options) {\n    return _getDocuments(this, __privateGet(this, _httpRequest), ids, options);\n  }\n  create(document, options) {\n    return _create(this, __privateGet(this, _httpRequest), document, \"create\", options);\n  }\n  createIfNotExists(document, options) {\n    return _createIfNotExists(this, __privateGet(this, _httpRequest), document, options);\n  }\n  createOrReplace(document, options) {\n    return _createOrReplace(this, __privateGet(this, _httpRequest), document, options);\n  }\n  delete(selection, options) {\n    return _delete(this, __privateGet(this, _httpRequest), selection, options);\n  }\n  mutate(operations, options) {\n    return _mutate(this, __privateGet(this, _httpRequest), operations, options);\n  }\n  /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */\n  patch(selection, operations) {\n    return new ObservablePatch(selection, operations, this);\n  }\n  /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */\n  transaction(operations) {\n    return new ObservableTransaction(operations, this);\n  }\n  /**\n   * Perform an HTTP request against the Sanity API\n   *\n   * @param options - Request options\n   */\n  request(options) {\n    return _request(this, __privateGet(this, _httpRequest), options);\n  }\n  /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */\n  getUrl(uri, canUseCdn) {\n    return _getUrl(this, uri, canUseCdn);\n  }\n  /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */\n  getDataUrl(operation, path) {\n    return _getDataUrl(this, operation, path);\n  }\n};\n_clientConfig = new WeakMap();\n_httpRequest = new WeakMap();\nlet ObservableSanityClient = _ObservableSanityClient;\nconst _SanityClient = class _SanityClient {\n  constructor(httpRequest) {\n    let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultConfig;\n    /**\n     * Private properties\n     */\n    __privateAdd(this, _clientConfig2, void 0);\n    __privateAdd(this, _httpRequest2, void 0);\n    /**\n     * Instance properties\n     */\n    this.listen = _listen;\n    this.config(config);\n    __privateSet(this, _httpRequest2, httpRequest);\n    this.assets = new AssetsClient(this, __privateGet(this, _httpRequest2));\n    this.datasets = new DatasetsClient(this, __privateGet(this, _httpRequest2));\n    this.projects = new ProjectsClient(this, __privateGet(this, _httpRequest2));\n    this.users = new UsersClient(this, __privateGet(this, _httpRequest2));\n    this.observable = new ObservableSanityClient(httpRequest, config);\n  }\n  /**\n   * Clone the client - returns a new instance\n   */\n  clone() {\n    return new _SanityClient(__privateGet(this, _httpRequest2), this.config());\n  }\n  config(newConfig) {\n    if (newConfig === void 0) {\n      return {\n        ...__privateGet(this, _clientConfig2)\n      };\n    }\n    if (__privateGet(this, _clientConfig2) && __privateGet(this, _clientConfig2).allowReconfigure === false) {\n      throw new Error(\"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\");\n    }\n    if (this.observable) {\n      this.observable.config(newConfig);\n    }\n    __privateSet(this, _clientConfig2, initConfig(newConfig, __privateGet(this, _clientConfig2) || {}));\n    return this;\n  }\n  /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */\n  withConfig(newConfig) {\n    return new _SanityClient(__privateGet(this, _httpRequest2), {\n      ...this.config(),\n      ...newConfig\n    });\n  }\n  fetch(query, params) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return rxjs.lastValueFrom(_fetch(this, __privateGet(this, _httpRequest2), query, params, options));\n  }\n  /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */\n  getDocument(id, options) {\n    return rxjs.lastValueFrom(_getDocument(this, __privateGet(this, _httpRequest2), id, options));\n  }\n  /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */\n  getDocuments(ids, options) {\n    return rxjs.lastValueFrom(_getDocuments(this, __privateGet(this, _httpRequest2), ids, options));\n  }\n  create(document, options) {\n    return rxjs.lastValueFrom(_create(this, __privateGet(this, _httpRequest2), document, \"create\", options));\n  }\n  createIfNotExists(document, options) {\n    return rxjs.lastValueFrom(_createIfNotExists(this, __privateGet(this, _httpRequest2), document, options));\n  }\n  createOrReplace(document, options) {\n    return rxjs.lastValueFrom(_createOrReplace(this, __privateGet(this, _httpRequest2), document, options));\n  }\n  delete(selection, options) {\n    return rxjs.lastValueFrom(_delete(this, __privateGet(this, _httpRequest2), selection, options));\n  }\n  mutate(operations, options) {\n    return rxjs.lastValueFrom(_mutate(this, __privateGet(this, _httpRequest2), operations, options));\n  }\n  /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */\n  patch(documentId, operations) {\n    return new Patch(documentId, operations, this);\n  }\n  /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */\n  transaction(operations) {\n    return new Transaction(operations, this);\n  }\n  /**\n   * Perform a request against the Sanity API\n   * NOTE: Only use this for Sanity API endpoints, not for your own APIs!\n   *\n   * @param options - Request options\n   * @returns Promise resolving to the response body\n   */\n  request(options) {\n    return rxjs.lastValueFrom(_request(this, __privateGet(this, _httpRequest2), options));\n  }\n  /**\n   * Perform an HTTP request a `/data` sub-endpoint\n   * NOTE: Considered internal, thus marked as deprecated. Use `request` instead.\n   *\n   * @deprecated - Use `request()` or your own HTTP library instead\n   * @param endpoint - Endpoint to hit (mutate, query etc)\n   * @param body - Request body\n   * @param options - Request options\n   * @internal\n   */\n  dataRequest(endpoint, body, options) {\n    return rxjs.lastValueFrom(_dataRequest(this, __privateGet(this, _httpRequest2), endpoint, body, options));\n  }\n  /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */\n  getUrl(uri, canUseCdn) {\n    return _getUrl(this, uri, canUseCdn);\n  }\n  /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */\n  getDataUrl(operation, path) {\n    return _getDataUrl(this, operation, path);\n  }\n};\n_clientConfig2 = new WeakMap();\n_httpRequest2 = new WeakMap();\nlet SanityClient = _SanityClient;\nconst httpRequest = defineHttpRequest(middleware, {});\nconst requester = httpRequest.defaultRequester;\nconst createClient = config => new SanityClient(defineHttpRequest(middleware, {\n  maxRetries: config.maxRetries,\n  retryDelay: config.retryDelay\n}), config);\nfunction deprecatedCreateClient(config) {\n  printNoDefaultExport();\n  return new SanityClient(httpRequest, config);\n}\nObject.defineProperty(exports, \"unstable__adapter\", ({\n  enumerable: true,\n  get: function () {\n    return getIt.adapter;\n  }\n}));\nObject.defineProperty(exports, \"unstable__environment\", ({\n  enumerable: true,\n  get: function () {\n    return getIt.environment;\n  }\n}));\nexports.BasePatch = BasePatch;\nexports.BaseTransaction = BaseTransaction;\nexports.ClientError = ClientError;\nexports.ObservablePatch = ObservablePatch;\nexports.ObservableSanityClient = ObservableSanityClient;\nexports.ObservableTransaction = ObservableTransaction;\nexports.Patch = Patch;\nexports.SanityClient = SanityClient;\nexports.ServerError = ServerError;\nexports.Transaction = Transaction;\nexports.createClient = createClient;\nexports[\"default\"] = deprecatedCreateClient;\nexports.requester = requester;\n//# sourceMappingURL=index.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/client/dist/index.cjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/eventsource/node.js":
/*!**************************************************!*\
  !*** ./node_modules/@sanity/eventsource/node.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! eventsource */ \"(ssr)/./node_modules/eventsource/lib/eventsource.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9ldmVudHNvdXJjZS9ub2RlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhHQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2FuaXR5L2V2ZW50c291cmNlL25vZGUuanM/YmE2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2V2ZW50c291cmNlJylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/eventsource/node.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sanity/client/dist/index.cjs.js":
/*!*******************************************************!*\
  !*** ./node_modules/@sanity/client/dist/index.cjs.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePatch: () => (/* binding */ BasePatch),\n/* harmony export */   BaseTransaction: () => (/* binding */ BaseTransaction),\n/* harmony export */   ClientError: () => (/* binding */ ClientError),\n/* harmony export */   ObservablePatch: () => (/* binding */ ObservablePatch),\n/* harmony export */   ObservableSanityClient: () => (/* binding */ ObservableSanityClient),\n/* harmony export */   ObservableTransaction: () => (/* binding */ ObservableTransaction),\n/* harmony export */   Patch: () => (/* binding */ Patch),\n/* harmony export */   SanityClient: () => (/* binding */ SanityClient),\n/* harmony export */   ServerError: () => (/* binding */ ServerError),\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   requester: () => (/* binding */ requester),\n/* harmony export */   unstable__adapter: () => (/* binding */ unstable__adapter),\n/* harmony export */   unstable__environment: () => (/* binding */ unstable__environment)\n/* harmony export */ });\n/* harmony import */ var _index_cjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.cjs */ \"(ssr)/./node_modules/@sanity/client/dist/index.cjs\");\n\n\nconst unstable__adapter = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.unstable__adapter;\nconst unstable__environment = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.unstable__environment;\nconst BasePatch = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.BasePatch;\nconst BaseTransaction = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.BaseTransaction;\nconst ClientError = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.ClientError;\nconst ObservablePatch = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.ObservablePatch;\nconst ObservableSanityClient = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.ObservableSanityClient;\nconst ObservableTransaction = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.ObservableTransaction;\nconst Patch = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.Patch;\nconst SanityClient = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.SanityClient;\nconst ServerError = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.ServerError;\nconst Transaction = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.Transaction;\nconst createClient = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.createClient;\nconst requester = _index_cjs__WEBPACK_IMPORTED_MODULE_0__.requester;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_index_cjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9jbGllbnQvZGlzdC9pbmRleC5janMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4Qjs7QUFFdkIsMEJBQTBCLHlEQUFxQjtBQUMvQyw4QkFBOEIsNkRBQXlCO0FBQ3ZELGtCQUFrQixpREFBYTtBQUMvQix3QkFBd0IsdURBQW1CO0FBQzNDLG9CQUFvQixtREFBZTtBQUNuQyx3QkFBd0IsdURBQW1CO0FBQzNDLCtCQUErQiw4REFBMEI7QUFDekQsOEJBQThCLDZEQUF5QjtBQUN2RCxjQUFjLDZDQUFTO0FBQ3ZCLHFCQUFxQixvREFBZ0I7QUFDckMsb0JBQW9CLG1EQUFlO0FBQ25DLG9CQUFvQixtREFBZTtBQUNuQyxxQkFBcUIsb0RBQWdCO0FBQ3JDLGtCQUFrQixpREFBYTs7QUFFdEMsaUVBQWUsa0RBQVcsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby8uL25vZGVfbW9kdWxlcy9Ac2FuaXR5L2NsaWVudC9kaXN0L2luZGV4LmNqcy5qcz85ZDRmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjanMgZnJvbSAnLi9pbmRleC5janMnO1xuXG5leHBvcnQgY29uc3QgdW5zdGFibGVfX2FkYXB0ZXIgPSBjanMudW5zdGFibGVfX2FkYXB0ZXI7XG5leHBvcnQgY29uc3QgdW5zdGFibGVfX2Vudmlyb25tZW50ID0gY2pzLnVuc3RhYmxlX19lbnZpcm9ubWVudDtcbmV4cG9ydCBjb25zdCBCYXNlUGF0Y2ggPSBjanMuQmFzZVBhdGNoO1xuZXhwb3J0IGNvbnN0IEJhc2VUcmFuc2FjdGlvbiA9IGNqcy5CYXNlVHJhbnNhY3Rpb247XG5leHBvcnQgY29uc3QgQ2xpZW50RXJyb3IgPSBjanMuQ2xpZW50RXJyb3I7XG5leHBvcnQgY29uc3QgT2JzZXJ2YWJsZVBhdGNoID0gY2pzLk9ic2VydmFibGVQYXRjaDtcbmV4cG9ydCBjb25zdCBPYnNlcnZhYmxlU2FuaXR5Q2xpZW50ID0gY2pzLk9ic2VydmFibGVTYW5pdHlDbGllbnQ7XG5leHBvcnQgY29uc3QgT2JzZXJ2YWJsZVRyYW5zYWN0aW9uID0gY2pzLk9ic2VydmFibGVUcmFuc2FjdGlvbjtcbmV4cG9ydCBjb25zdCBQYXRjaCA9IGNqcy5QYXRjaDtcbmV4cG9ydCBjb25zdCBTYW5pdHlDbGllbnQgPSBjanMuU2FuaXR5Q2xpZW50O1xuZXhwb3J0IGNvbnN0IFNlcnZlckVycm9yID0gY2pzLlNlcnZlckVycm9yO1xuZXhwb3J0IGNvbnN0IFRyYW5zYWN0aW9uID0gY2pzLlRyYW5zYWN0aW9uO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUNsaWVudCA9IGNqcy5jcmVhdGVDbGllbnQ7XG5leHBvcnQgY29uc3QgcmVxdWVzdGVyID0gY2pzLnJlcXVlc3RlcjtcblxuZXhwb3J0IGRlZmF1bHQgY2pzLmRlZmF1bHQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sanity/client/dist/index.cjs.js\n");

/***/ })

};
;